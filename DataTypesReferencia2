// SPDX-License-Identifier: GPL-3.0

pragma solidity >=0.7 < 0.9.0;
// tambien se puede escribir pragma solidity ^0.8.0

//Recomendación, poner el mismo nombre del archivo o carpeta 
contract DataTypesReferencia {

//Struct
struct Persona {
    string nombre;
    int edad;
    bool activo;
}

//crear el dato 
Persona persona1 = Persona ("Liz",22,true);

Persona persona2 = Persona("Montse",26,true);

//obtener la edad o alguno de los valores del struct
string public nombrePersona = persona1.nombre;
int public edadPersona = persona1.edad;

string public nombrePersona2 = persona2.nombre;
int public edadPErsona2 = persona2.edad;

//mappin - tablas hash o didcionario
//Asocia una clave y un valor
//{clave, valor} Eje-> {Número, fruta} = {1,manzana}, {2,pera},{3,durazno}
//Si consulto la clave me va a otorgar el valor 

mapping (int => string) public frutas; 
//con esto declaramos el mapping, solo hemos hecho el tipo de dato 

//Vamos a agregar valores la mapping, pero para esto es necesario crear una función. En las funciones siempre hay que poner public
//Solo creamos la funcion, pero no la hemos mandado llamar
//Para el deplo, primero hacer click en addFruta y despues en frutas poner clave 1
function addFruta() public{
    frutas[1] = "manzanas";
    frutas [200] = "pera";
}
    //no tiene que ser consecutivo como el array
    /* Los mapping se utilizan mucho para asociar el adrres al saldo o balances*/
    mapping (address => int) balances;
    function addBalance() public{
    frutas[1] = "100";
    frutas [200] = "p50";
    }

    //mapping que asocie la persona con una dirección
    mapping (address => Persona) mappingpersona;
  
//Arrays - deben de ser consecutivos y siempre inician en 0
//En los mapping puede ser cualquier dato la clave
//una colección de valores del mismo tipo de dato Ej: frutas
// [manzana, pera,durazno]

//arrays dinámicos porque no definimos el # de datos de cada array
string[] public arrFrutas;
Persona[] public arrPersonas;
int[] public arrNumeros;

//array fijo
//int[3] public arrNumeros;

function addArrayPersonas() public {
    arrPersonas.push(persona1);
}

function addArrayFrutas() public {
    arrFrutas.push("Pera");
    arrFrutas.push("Durazno");
    arrFrutas.push("Fresa");
}

    function addArrayFrutasAuto(string memory _frutaNueva) public{
        arrFrutas.push(_frutaNueva);
    }

//Para consultar arrays primero le ponemos en ADd y luego "0" al ser un arrgelo y consultarlo

function addArrayNumeros() public {
    arrNumeros.push(1);
}

}
